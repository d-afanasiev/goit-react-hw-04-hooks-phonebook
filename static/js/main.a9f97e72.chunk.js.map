{"version":3,"sources":["components/Filter/Filter.module.css","components/ContactForm/ContactForm.module.css","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","App.js","index.js","components/ContactList/ContactList.module.css"],"names":["module","exports","ContactForm","formSubmitHandler","useState","name","setName","number","setNumber","handleChange","e","target","value","reset","className","css","form","onSubmit","preventDefault","idFullName","uuidv4","id","htmlFor","type","pattern","title","required","onChange","inputName","inputTel","submitName","Filter","filter","filterList","inputFilter","ContactList","getVisibleContacts","deleteContact","listContacts","map","contact","item","button","onClick","App","state","contacts","setState","data","find","alert","prevState","getVisibleList","normalizeFilter","toLowerCase","includes","localStorage","getItem","parseContacts","JSON","parse","this","prevProps","nextContacts","setItem","stringify","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a9f97e72.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputFilter\":\"Filter_inputFilter__fLLJ3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1fuOn\",\"name\":\"ContactForm_name__1yuhS\",\"inputName\":\"ContactForm_inputName__26Y8y\",\"inputTel\":\"ContactForm_inputTel__1C3lX\",\"submitName\":\"ContactForm_submitName__2nn2T\"};","import PropTypes from \"prop-types\";\nimport { useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport css from \"./ContactForm.module.css\";\n\nexport default function ContactForm({ formSubmitHandler }) {\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    if (name === \"name\") {\n      setName(value);\n    } else {\n      setNumber(value);\n    }\n    // this.setState({ [name]: value });\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    let idFullName = uuidv4();\n    const totalState = {\n      id: idFullName,\n      name: name,\n      number: number,\n    };\n\n    formSubmitHandler(totalState);\n\n    reset();\n  };\n\n  const reset = () => {\n    setName(\"\");\n    setNumber(\"\");\n  };\n\n  return (\n    <form className={css.form} onSubmit={handleSubmit}>\n      <label htmlFor=\"sendName\" className={css.name}>\n        Name\n      </label>\n      <input\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        required\n        value={name}\n        onChange={handleChange}\n        className={css.inputName}\n        id=\"sendName\"\n      />\n      <label htmlFor=\"sendTel\">Number</label>\n      <input\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n        required\n        className={css.inputTel}\n        onChange={handleChange}\n        value={number}\n        id=\"sendTel\"\n      />\n      <button type=\"submit\" className={css.submitName}>\n        Add contact\n      </button>\n    </form>\n  );\n}\n\n// class ContactForm extends Component {\n//   state = {\n//     name: \"\",\n//     number: \"\",\n//   };\n\n//   handleChange = (e) => {\n//     const { name, value } = e.target;\n//     this.setState({ [name]: value });\n//   };\n\n//   handleSubmit = (e) => {\n//     e.preventDefault();\n//     let idFullName = uuidv4();\n//     const totalState = {\n//       id: idFullName,\n//       name: this.state.name,\n//       number: this.state.number,\n//     };\n\n//     this.props.formSubmitHandler(totalState);\n\n//     this.reset();\n//   };\n\n//   reset = () => {\n//     this.setState({\n//       filter: \"\",\n//       name: \"\",\n//       number: \"\",\n//     });\n//   };\n\n//   render() {\n//     const { name, number } = this.state;\n\n//     return (\n//       <form className={css.form} onSubmit={this.handleSubmit}>\n//         <label htmlFor=\"sendName\" className={css.name}>\n//           Name\n//         </label>\n//         <input\n//           type=\"text\"\n//           name=\"name\"\n//           pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//           title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n//           required\n//           value={name}\n//           onChange={this.handleChange}\n//           className={css.inputName}\n//           id=\"sendName\"\n//         />\n//         <label htmlFor=\"sendTel\">Number</label>\n//         <input\n//           type=\"tel\"\n//           name=\"number\"\n//           pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//           title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n//           required\n//           className={css.inputTel}\n//           onChange={this.handleChange}\n//           value={number}\n//           id=\"sendTel\"\n//         />\n//         <button type=\"submit\" className={css.submitName}>\n//           Add contact\n//         </button>\n//       </form>\n//     );\n//   }\n// }\n\nContactForm.propTypes = {\n  formSubmitHandler: PropTypes.func,\n};\n\n// export default ContactForm;\n","import PropTypes from \"prop-types\";\nimport css from \"./Filter.module.css\";\n\nfunction Filter({ filter, filterList }) {\n  return (\n    <div>\n      <p>Find contacts by name</p>\n      <input\n        type=\"text\"\n        name=\"filter\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        className={css.inputFilter}\n        onChange={filterList}\n        value={filter}\n      />\n    </div>\n  );\n}\n\nFilter.propTypes = {\n  filter: PropTypes.string,\n  formSubmitHandler: PropTypes.func,\n};\n\nexport default Filter;\n","import PropTypes from \"prop-types\";\nimport css from \"./ContactList.module.css\";\n\nfunction ContactList({ getVisibleContacts, deleteContact }) {\n  return (\n    <ul className={css.listContacts}>\n      {getVisibleContacts.map((contact) => (\n        <li key={contact.id} className={css.item}>\n          {contact.name}: {contact.number}\n          <button\n            type=\"submit\"\n            className={css.button}\n            onClick={() => deleteContact(contact)}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nContactList.propTypes = {\n  getVisibleContacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      name: PropTypes.string,\n      number: PropTypes.string,\n    })\n  ),\n};\n\nexport default ContactList;\n","import \"./App.css\";\nimport PropTypes from \"prop-types\";\nimport { Component } from \"react\";\nimport ContactForm from \"./components/ContactForm\";\nimport Filter from \"./components/Filter\";\nimport ContactList from \"./components/ContactList\";\n\nclass App extends Component {\n  state = {\n    contacts: [],\n    filter: \"\",\n  };\n\n  componentDidMount() {\n    const contacts = localStorage.getItem(\"contacts\");\n    const parseContacts = JSON.parse(contacts);\n\n    if (parseContacts) {\n      this.setState({ contacts: parseContacts });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const nextContacts = this.state.contacts;\n    const prevContacts = prevState.contacts;\n\n    if (nextContacts !== prevContacts) {\n      localStorage.setItem(\"contacts\", JSON.stringify(nextContacts));\n    }\n  }\n\n  filterList = (e) => {\n    this.setState({\n      filter: e.target.value,\n    });\n  };\n\n  formSubmitHandler = (data) => {\n    const findContacts = this.state.contacts.find(\n      (contact) => contact.name === data.name\n    );\n\n    !findContacts\n      ? this.setState((prevState) => ({\n          contacts: [data, ...prevState.contacts],\n        }))\n      : alert(`${data.name} is already in contacts.`);\n  };\n\n  getVisibleList = () => {\n    const { filter, contacts } = this.state;\n    const normalizeFilter = filter.toLowerCase();\n\n    return contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(normalizeFilter)\n    );\n  };\n\n  deleteContact = (data) => {\n    return this.setState((prevState) => ({\n      contacts: prevState.contacts.filter((contact) => contact.id !== data.id),\n    }));\n  };\n\n  render() {\n    const { filter } = this.state;\n\n    const getVisibleContacts = this.getVisibleList();\n\n    return (\n      <div className=\"App\">\n        <h1 className=\"titlePhonebook\">Phonebook</h1>\n        <ContactForm formSubmitHandler={this.formSubmitHandler} />\n\n        <h1 className=\"titleContacts\">Contacts</h1>\n        <Filter filter={filter} filterList={this.filterList} />\n        <ContactList\n          getVisibleContacts={getVisibleContacts}\n          deleteContact={this.deleteContact}\n        />\n      </div>\n    );\n  }\n}\n\nApp.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number,\n      name: PropTypes.string,\n      number: PropTypes.string,\n    })\n  ),\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listContacts\":\"ContactList_listContacts__29K0_\",\"button\":\"ContactList_button__1RuFy\",\"item\":\"ContactList_item__3YsZK\"};"],"sourceRoot":""}