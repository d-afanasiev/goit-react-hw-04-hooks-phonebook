{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","App.js","index.js"],"names":["module","exports","ContactForm","state","name","number","handleChange","e","target","value","setState","handleSubmit","preventDefault","totalState","id","uuidv4","props","formSubmitHandler","reset","filter","this","className","css","form","onSubmit","htmlFor","type","pattern","title","required","onChange","inputName","inputTel","submitName","Component","Filter","filterList","inputFilter","ContactList","getVisibleContacts","deleteContact","listContacts","map","contact","item","button","onClick","App","contacts","data","find","alert","prevState","getVisibleList","normalizeFilter","toLowerCase","includes","localStorage","getItem","parseContacts","JSON","parse","prevProps","nextContacts","setItem","stringify","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1ce3d763.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__2nG2I\",\"name\":\"ContactForm_name__1MLCu\",\"inputName\":\"ContactForm_inputName__1WM27\",\"inputTel\":\"ContactForm_inputTel__3RJtC\",\"submitName\":\"ContactForm_submitName__3o-nz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listContacts\":\"ContactList_listContacts__DgKNB\",\"button\":\"ContactList_button__21o0E\",\"item\":\"ContactList_item__3jGkv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputFilter\":\"Filter_inputFilter__gg-Or\"};","import PropTypes from \"prop-types\";\nimport { Component } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport css from \"./ContactForm.module.css\";\n\nclass ContactForm extends Component {\n  state = {\n    name: \"\",\n    number: \"\",\n  };\n\n  handleChange = (e) => {\n    const { name, value } = e.target;\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    let idFullName = uuidv4();\n    const totalState = {\n      id: idFullName,\n      name: this.state.name,\n      number: this.state.number,\n    };\n\n    this.props.formSubmitHandler(totalState);\n\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({\n      filter: \"\",\n      name: \"\",\n      number: \"\",\n    });\n  };\n\n  render() {\n    const { name, number } = this.state;\n\n    return (\n      <form className={css.form} onSubmit={this.handleSubmit}>\n        <label htmlFor=\"sendName\" className={css.name}>\n          Name\n        </label>\n        <input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          value={name}\n          onChange={this.handleChange}\n          className={css.inputName}\n          id=\"sendName\"\n        />\n        <label htmlFor=\"sendTel\">Number</label>\n        <input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          className={css.inputTel}\n          onChange={this.handleChange}\n          value={number}\n          id=\"sendTel\"\n        />\n        <button type=\"submit\" className={css.submitName}>\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n\nContactForm.propTypes = {\n  formSubmitHandler: PropTypes.func,\n};\n\nexport default ContactForm;\n","import PropTypes from \"prop-types\";\nimport css from \"./Filter.module.css\";\n\nfunction Filter({ filter, filterList }) {\n  return (\n    <div>\n      <p>Find contacts by name</p>\n      <input\n        type=\"text\"\n        name=\"filter\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        className={css.inputFilter}\n        onChange={filterList}\n        value={filter}\n      />\n    </div>\n  );\n}\n\nFilter.propTypes = {\n  filter: PropTypes.string,\n  formSubmitHandler: PropTypes.func,\n};\n\nexport default Filter;\n","import PropTypes from \"prop-types\";\nimport css from \"./ContactList.module.css\";\n\nfunction ContactList({ getVisibleContacts, deleteContact }) {\n  return (\n    <ul className={css.listContacts}>\n      {getVisibleContacts.map((contact) => (\n        <li key={contact.id} className={css.item}>\n          {contact.name}: {contact.number}\n          <button\n            type=\"submit\"\n            className={css.button}\n            onClick={() => deleteContact(contact)}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nContactList.propTypes = {\n  getVisibleContacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      name: PropTypes.string,\n      number: PropTypes.string,\n    })\n  ),\n};\n\nexport default ContactList;\n","import \"./App.css\";\nimport PropTypes from \"prop-types\";\nimport { Component } from \"react\";\nimport ContactForm from \"./components/ContactForm\";\nimport Filter from \"./components/Filter\";\nimport ContactList from \"./components/ContactList\";\n\nclass App extends Component {\n  state = {\n    contacts: [],\n    filter: \"\",\n  };\n\n  componentDidMount() {\n    const contacts = localStorage.getItem(\"contacts\");\n    const parseContacts = JSON.parse(contacts);\n\n    if (parseContacts) {\n      this.setState({ contacts: parseContacts });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const nextContacts = this.state.contacts;\n    const prevContacts = prevState.contacts;\n\n    if (nextContacts !== prevContacts) {\n      localStorage.setItem(\"contacts\", JSON.stringify(nextContacts));\n    }\n  }\n\n  filterList = (e) => {\n    this.setState({\n      filter: e.target.value,\n    });\n  };\n\n  formSubmitHandler = (data) => {\n    const findContacts = this.state.contacts.find(\n      (contact) => contact.name === data.name\n    );\n\n    !findContacts\n      ? this.setState((prevState) => ({\n          contacts: [data, ...prevState.contacts],\n        }))\n      : alert(`${data.name} is already in contacts.`);\n  };\n\n  getVisibleList = () => {\n    const { filter, contacts } = this.state;\n    const normalizeFilter = filter.toLowerCase();\n\n    return contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(normalizeFilter)\n    );\n  };\n\n  deleteContact = (data) => {\n    return this.setState((prevState) => ({\n      contacts: prevState.contacts.filter((contact) => contact.id !== data.id),\n    }));\n  };\n\n  render() {\n    const { filter } = this.state;\n\n    const getVisibleContacts = this.getVisibleList();\n\n    return (\n      <div className=\"App\">\n        <h1 className=\"titlePhonebook\">Phonebook</h1>\n        <ContactForm formSubmitHandler={this.formSubmitHandler} />\n\n        <h1 className=\"titleContacts\">Contacts</h1>\n        <Filter filter={filter} filterList={this.filterList} />\n        <ContactList\n          getVisibleContacts={getVisibleContacts}\n          deleteContact={this.deleteContact}\n        />\n      </div>\n    );\n  }\n}\n\nApp.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number,\n      name: PropTypes.string,\n      number: PropTypes.string,\n    })\n  ),\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}